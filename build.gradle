plugins {
  id "io.spring.dependency-management" version "1.0.8.RELEASE"
  id "com.github.johnrengelman.shadow" version "5.0.0"
  id "application"
  id "net.ltgt.apt-eclipse" version "0.21"
}


wrapper { gradleVersion = '6.0' }
version "0.1"
group "mnlonj2"

repositories {
  mavenCentral()
  maven { url "https://jcenter.bintray.com" }
}

configurations {
  // for dependencies that are needed for development only
  developmentOnly 
}

ext{
  springSecurityCryptoVersion='5.1.6.RELEASE'  
}
dependencies {
  compile "org.springframework.security:spring-security-crypto:$springSecurityCryptoVersion"
  annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
  annotationProcessor "io.micronaut:micronaut-graal"
  annotationProcessor "io.micronaut:micronaut-inject-java"
  annotationProcessor "io.micronaut:micronaut-validation"
  compileOnly "org.graalvm.nativeimage:svm"
  implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
  implementation "io.micronaut:micronaut-security-jwt"
  implementation "io.micronaut:micronaut-http-client"
  implementation "io.micronaut:micronaut-inject"
  implementation "io.micronaut:micronaut-validation"
  implementation "io.micronaut:micronaut-runtime"
  implementation "io.micronaut.configuration:micronaut-postgres-reactive"
  implementation "io.micronaut:micronaut-http-server-netty"
  runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
  testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
  testAnnotationProcessor "io.micronaut:micronaut-inject-java"
  testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
  testImplementation "org.junit.jupiter:junit-jupiter-api"
  testImplementation "io.micronaut.test:micronaut-test-junit5"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    
  annotationProcessor "io.micronaut:micronaut-security"
  compile "io.micronaut:micronaut-security"
  compile "org.postgresql:postgresql:42.2.6"
  compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
  
  compile 'com.hazelcast:hazelcast:4.0'

  
}

test.classpath += configurations.developmentOnly

mainClassName = "mnlonj2.Application"
// use JUnit 5 platform
test {
  useJUnitPlatform()
}

shadowJar {
  mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
tasks.withType(JavaCompile){
  options.encoding = "UTF-8"
  options.compilerArgs.add('-parameters')
}
